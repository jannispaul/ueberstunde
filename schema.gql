### Type definitions saved at 2020-01-07T12:30:29.555Z ###

type File implements Node @dontInfer {
  sourceInstanceName: String!
  absolutePath: String!
  relativePath: String!
  extension: String!
  size: Int!
  prettySize: String!
  modifiedTime: Date! @dateformat
  accessTime: Date! @dateformat
  changeTime: Date! @dateformat
  birthTime: Date! @dateformat
  root: String!
  dir: String!
  base: String!
  ext: String!
  name: String!
  relativeDirectory: String!
  dev: Int!
  mode: Int!
  nlink: Int!
  uid: Int!
  gid: Int!
  rdev: Int!
  ino: Float!
  atimeMs: Float!
  mtimeMs: Float!
  ctimeMs: Float!
  atime: Date! @dateformat
  mtime: Date! @dateformat
  ctime: Date! @dateformat
  birthtime: Date @deprecated(reason: "Use `birthTime` instead")
  birthtimeMs: Float @deprecated(reason: "Use `birthTime` instead")
  blksize: Int
  blocks: Int
  url: String
}

type Directory implements Node @dontInfer {
  sourceInstanceName: String!
  absolutePath: String!
  relativePath: String!
  extension: String!
  size: Int!
  prettySize: String!
  modifiedTime: Date! @dateformat
  accessTime: Date! @dateformat
  changeTime: Date! @dateformat
  birthTime: Date! @dateformat
  root: String!
  dir: String!
  base: String!
  ext: String!
  name: String!
  relativeDirectory: String!
  dev: Int!
  mode: Int!
  nlink: Int!
  uid: Int!
  gid: Int!
  rdev: Int!
  ino: Float!
  atimeMs: Float!
  mtimeMs: Float!
  ctimeMs: Float!
  atime: Date! @dateformat
  mtime: Date! @dateformat
  ctime: Date! @dateformat
  birthtime: Date @deprecated(reason: "Use `birthTime` instead")
  birthtimeMs: Float @deprecated(reason: "Use `birthTime` instead")
  blksize: Int
  blocks: Int
}

type MarkdownHeading {
  value: String
  depth: Int
}

enum MarkdownHeadingLevels {
  h1
  h2
  h3
  h4
  h5
  h6
}

enum MarkdownExcerptFormats {
  PLAIN
  HTML
  MARKDOWN
}

type MarkdownWordCount {
  paragraphs: Int
  sentences: Int
  words: Int
}

type MarkdownRemark implements Node
  @childOf(
    mimeTypes: ["text/markdown", "text/x-markdown"]
    types: []
    many: false
  )
  @derivedTypes
  @dontInfer {
  frontmatter: MarkdownRemarkFrontmatter
  excerpt: String
  rawMarkdownBody: String
}

type MarkdownRemarkFrontmatter {
  title: String
}

enum ImageFormat {
  NO_CHANGE
  JPG
  PNG
  WEBP
}

enum ImageFit {
  COVER
  CONTAIN
  FILL
}

enum ImageCropFocus {
  CENTER
  NORTH
  NORTHEAST
  EAST
  SOUTHEAST
  SOUTH
  SOUTHWEST
  WEST
  NORTHWEST
  ENTROPY
  ATTENTION
}

input DuotoneGradient {
  highlight: String!
  shadow: String!
  opacity: Int
}

enum PotraceTurnPolicy {
  TURNPOLICY_BLACK
  TURNPOLICY_WHITE
  TURNPOLICY_LEFT
  TURNPOLICY_RIGHT
  TURNPOLICY_MINORITY
  TURNPOLICY_MAJORITY
}

input Potrace {
  turnPolicy: PotraceTurnPolicy
  turdSize: Float
  alphaMax: Float
  optCurve: Boolean
  optTolerance: Float
  threshold: Int
  blackOnWhite: Boolean
  color: String
  background: String
}

type ImageSharp implements Node @childOf(types: ["File"]) @dontInfer {
  fixed(
    width: Int
    height: Int
    base64Width: Int
    jpegProgressive: Boolean = true
    pngCompressionSpeed: Int = 4
    grayscale: Boolean = false
    duotone: DuotoneGradient
    traceSVG: Potrace
    quality: Int
    jpegQuality: Int
    pngQuality: Int
    webpQuality: Int
    toFormat: ImageFormat = NO_CHANGE
    toFormatBase64: ImageFormat = NO_CHANGE
    cropFocus: ImageCropFocus = ATTENTION
    fit: ImageFit = COVER
    background: String = "rgba(0,0,0,1)"
    rotate: Int = 0
    trim: Float = 0
  ): ImageSharpFixed
  resolutions(
    width: Int
    height: Int
    base64Width: Int
    jpegProgressive: Boolean = true
    pngCompressionSpeed: Int = 4
    grayscale: Boolean = false
    duotone: DuotoneGradient
    traceSVG: Potrace
    quality: Int
    jpegQuality: Int
    pngQuality: Int
    webpQuality: Int
    toFormat: ImageFormat = NO_CHANGE
    toFormatBase64: ImageFormat = NO_CHANGE
    cropFocus: ImageCropFocus = ATTENTION
    fit: ImageFit = COVER
    background: String = "rgba(0,0,0,1)"
    rotate: Int = 0
    trim: Float = 0
  ): ImageSharpResolutions
    @deprecated(
      reason: "Resolutions was deprecated in Gatsby v2. It's been renamed to \"fixed\" https://example.com/write-docs-and-fix-this-example-link"
    )
  fluid(
    maxWidth: Int
    maxHeight: Int
    base64Width: Int
    grayscale: Boolean = false
    jpegProgressive: Boolean = true
    pngCompressionSpeed: Int = 4
    duotone: DuotoneGradient
    traceSVG: Potrace
    quality: Int
    jpegQuality: Int
    pngQuality: Int
    webpQuality: Int
    toFormat: ImageFormat = NO_CHANGE
    toFormatBase64: ImageFormat = NO_CHANGE
    cropFocus: ImageCropFocus = ATTENTION
    fit: ImageFit = COVER
    background: String = "rgba(0,0,0,1)"
    rotate: Int = 0
    trim: Float = 0
    sizes: String = ""

    """
    A list of image widths to be generated. Example: [ 200, 340, 520, 890 ]
    """
    srcSetBreakpoints: [Int] = []
  ): ImageSharpFluid
  sizes(
    maxWidth: Int
    maxHeight: Int
    base64Width: Int
    grayscale: Boolean = false
    jpegProgressive: Boolean = true
    pngCompressionSpeed: Int = 4
    duotone: DuotoneGradient
    traceSVG: Potrace
    quality: Int
    jpegQuality: Int
    pngQuality: Int
    webpQuality: Int
    toFormat: ImageFormat = NO_CHANGE
    toFormatBase64: ImageFormat = NO_CHANGE
    cropFocus: ImageCropFocus = ATTENTION
    fit: ImageFit = COVER
    background: String = "rgba(0,0,0,1)"
    rotate: Int = 0
    trim: Float = 0
    sizes: String = ""

    """
    A list of image widths to be generated. Example: [ 200, 340, 520, 890 ]
    """
    srcSetBreakpoints: [Int] = []
  ): ImageSharpSizes
    @deprecated(
      reason: "Sizes was deprecated in Gatsby v2. It's been renamed to \"fluid\" https://example.com/write-docs-and-fix-this-example-link"
    )
  original: ImageSharpOriginal
  resize(
    width: Int
    height: Int
    quality: Int
    jpegQuality: Int
    pngQuality: Int
    webpQuality: Int
    jpegProgressive: Boolean = true
    pngCompressionLevel: Int = 9
    pngCompressionSpeed: Int = 4
    grayscale: Boolean = false
    duotone: DuotoneGradient
    base64: Boolean = false
    traceSVG: Potrace
    toFormat: ImageFormat = NO_CHANGE
    cropFocus: ImageCropFocus = ATTENTION
    fit: ImageFit = COVER
    background: String = "rgba(0,0,0,1)"
    rotate: Int = 0
    trim: Float = 0
  ): ImageSharpResize
}

type ImageSharpFixed {
  base64: String
  tracedSVG: String
  aspectRatio: Float
  width: Float
  height: Float
  src: String
  srcSet: String
  srcWebp: String
  srcSetWebp: String
  originalName: String
}

type ImageSharpResolutions {
  base64: String
  tracedSVG: String
  aspectRatio: Float
  width: Float
  height: Float
  src: String
  srcSet: String
  srcWebp: String
  srcSetWebp: String
  originalName: String
}

type ImageSharpFluid {
  base64: String
  tracedSVG: String
  aspectRatio: Float
  src: String
  srcSet: String
  srcWebp: String
  srcSetWebp: String
  sizes: String
  originalImg: String
  originalName: String
  presentationWidth: Int
  presentationHeight: Int
}

type ImageSharpSizes {
  base64: String
  tracedSVG: String
  aspectRatio: Float
  src: String
  srcSet: String
  srcWebp: String
  srcSetWebp: String
  sizes: String
  originalImg: String
  originalName: String
  presentationWidth: Int
  presentationHeight: Int
}

type ImageSharpOriginal {
  width: Float
  height: Float
  src: String
}

type ImageSharpResize {
  src: String
  tracedSVG: String
  width: Int
  height: Int
  aspectRatio: Float
  originalName: String
}

type ContentfulAsset implements Node @derivedTypes @dontInfer {
  contentful_id: String
  file: ContentfulAssetFile
  title: String
  description: String
  node_locale: String
  localFile: File @link(by: "id", from: "localFile___NODE")
}

type ContentfulAssetFile @derivedTypes {
  url: String
  details: ContentfulAssetFileDetails
  fileName: String
  contentType: String
}

type ContentfulAssetFileDetails @derivedTypes {
  size: Int
  image: ContentfulAssetFileDetailsImage
}

type ContentfulAssetFileDetailsImage {
  width: Int
  height: Int
}

type contentfulPostBodyRichTextNode implements Node @derivedTypes @dontInfer {
  content: [contentfulPostBodyRichTextNodeContent]
  nodeType: String
  body: String
}

type contentfulPostBodyRichTextNodeContent @derivedTypes {
  data: contentfulPostBodyRichTextNodeContentData
  content: [contentfulPostBodyRichTextNodeContentContent]
  nodeType: String
}

type contentfulPostBodyRichTextNodeContentData @derivedTypes {
  target: contentfulPostBodyRichTextNodeContentDataTarget
}

type contentfulPostBodyRichTextNodeContentDataTarget @derivedTypes {
  sys: contentfulPostBodyRichTextNodeContentDataTargetSys
  fields: contentfulPostBodyRichTextNodeContentDataTargetFields
}

type contentfulPostBodyRichTextNodeContentDataTargetSys @derivedTypes {
  space: contentfulPostBodyRichTextNodeContentDataTargetSysSpace
  id: String
  type: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  environment: contentfulPostBodyRichTextNodeContentDataTargetSysEnvironment
  revision: Int
}

type contentfulPostBodyRichTextNodeContentDataTargetSysSpace @derivedTypes {
  sys: contentfulPostBodyRichTextNodeContentDataTargetSysSpaceSys
}

type contentfulPostBodyRichTextNodeContentDataTargetSysSpaceSys {
  type: String
  linkType: String
  id: String
}

type contentfulPostBodyRichTextNodeContentDataTargetSysEnvironment
  @derivedTypes {
  sys: contentfulPostBodyRichTextNodeContentDataTargetSysEnvironmentSys
}

type contentfulPostBodyRichTextNodeContentDataTargetSysEnvironmentSys {
  id: String
  type: String
  linkType: String
}

type contentfulPostBodyRichTextNodeContentDataTargetFields @derivedTypes {
  title: contentfulPostBodyRichTextNodeContentDataTargetFieldsTitle
  description: contentfulPostBodyRichTextNodeContentDataTargetFieldsDescription
  file: contentfulPostBodyRichTextNodeContentDataTargetFieldsFile
}

type contentfulPostBodyRichTextNodeContentDataTargetFieldsTitle {
  de: String
}

type contentfulPostBodyRichTextNodeContentDataTargetFieldsDescription {
  de: String
}

type contentfulPostBodyRichTextNodeContentDataTargetFieldsFile @derivedTypes {
  de: contentfulPostBodyRichTextNodeContentDataTargetFieldsFileDe
}

type contentfulPostBodyRichTextNodeContentDataTargetFieldsFileDe @derivedTypes {
  url: String
  details: contentfulPostBodyRichTextNodeContentDataTargetFieldsFileDeDetails
  fileName: String
  contentType: String
}

type contentfulPostBodyRichTextNodeContentDataTargetFieldsFileDeDetails
  @derivedTypes {
  size: Int
  image: contentfulPostBodyRichTextNodeContentDataTargetFieldsFileDeDetailsImage
}

type contentfulPostBodyRichTextNodeContentDataTargetFieldsFileDeDetailsImage {
  width: Int
  height: Int
}

type contentfulPostBodyRichTextNodeContentContent @derivedTypes {
  data: contentfulPostBodyRichTextNodeContentContentData
  value: String
  nodeType: String
  content: [contentfulPostBodyRichTextNodeContentContentContent]
}

type contentfulPostBodyRichTextNodeContentContentData {
  uri: String
}

type contentfulPostBodyRichTextNodeContentContentContent {
  value: String
  nodeType: String
}

type contentfulPostDescriptionTextNode implements Node @dontInfer {
  description: String
}

type ContentfulPost implements Node @derivedTypes @dontInfer {
  title: String
  slug: String
  podcastSlug: String
  image: ContentfulAsset @link(by: "id", from: "image___NODE")
  description: contentfulPostDescriptionTextNode
    @link(by: "id", from: "description___NODE")
  body: contentfulPostBodyRichTextNode @link(by: "id", from: "body___NODE")
  spaceId: String
  contentful_id: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  sys: ContentfulPostSys
  node_locale: String
}

type ContentfulPostSys @derivedTypes {
  revision: Int
  contentType: ContentfulPostSysContentType
}

type ContentfulPostSysContentType @derivedTypes {
  sys: ContentfulPostSysContentTypeSys
}

type ContentfulPostSysContentTypeSys {
  type: String
  linkType: String
  id: String
}

type ContentfulContentType implements Node @dontInfer {
  name: String
  displayField: String
  description: String
}
